package com.sindercube.iconic.mixin.heldItemModel;

import com.sindercube.iconic.cache.Cache;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.color.item.ItemColors;
import net.minecraft.client.render.VertexConsumerProvider;
import net.minecraft.client.render.item.BuiltinModelItemRenderer;
import net.minecraft.client.render.item.ItemModels;
import net.minecraft.client.render.item.ItemRenderer;
import net.minecraft.client.render.model.BakedModel;
import net.minecraft.client.render.model.BakedModelManager;
import net.minecraft.client.render.model.json.ModelTransformation;
import net.minecraft.client.texture.TextureManager;
import net.minecraft.client.util.ModelIdentifier;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.entity.LivingEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.util.Identifier;
import net.minecraft.util.InvalidIdentifierException;
import net.minecraft.world.World;
import org.jetbrains.annotations.Nullable;
import org.spongepowered.asm.mixin.*;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Mixin(ItemRenderer.class)
public abstract class ItemRendererMixin {
    @Shadow @Final
    private ItemModels models;
    @Shadow
    public void renderItem(ItemStack stack, ModelTransformation.Mode renderMode, boolean leftHanded, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, BakedModel model) {}


    @Unique
    private static Cache<ModelTransformation.Mode, Integer> CACHED_HASHES = new Cache<>();
    @Unique
    private static Cache<ModelTransformation.Mode, BakedModel> CACHED_MODELS = new Cache<>();

    @Unique
    public List<ModelTransformation.Mode> UNIQUE_MODES = new ArrayList<>();
    @Inject(
            method = "<init>(Lnet/minecraft/client/texture/TextureManager;Lnet/minecraft/client/render/model/BakedModelManager;Lnet/minecraft/client/color/item/ItemColors;Lnet/minecraft/client/render/item/BuiltinModelItemRenderer;)V",
            at = @At("TAIL")
    )
    public void initSpecialModes(TextureManager m, BakedModelManager b, ItemColors c, BuiltinModelItemRenderer bm, CallbackInfo ci) {
        UNIQUE_MODES.add(ModelTransformation.Mode.GUI);
        UNIQUE_MODES.add(ModelTransformation.Mode.GROUND);
        UNIQUE_MODES.add(ModelTransformation.Mode.FIXED);
    }

    /**
     * @author Sindercube
     * @reason Cache models
     */
    @Overwrite
    public void renderItem(@Nullable LivingEntity entity, ItemStack stack, ModelTransformation.Mode renderMode, boolean leftHanded, MatrixStack matrices, VertexConsumerProvider vertexConsumers, @Nullable World world, int light, int overlay, int seed) {
        BakedModel model;
        if (CACHED_HASHES.getOrDefault(renderMode, 0) == stack.hashCode()) {
            model = CACHED_MODELS.get(renderMode);
        } else {
            model = this.models.getModel(stack);
            CACHED_HASHES.put(renderMode, stack.hashCode());
            CACHED_MODELS.put(renderMode, model);
        }
        model = model.getOverrides().apply(model, stack, (ClientWorld)world, entity, seed);
        if (model == null) model = this.models.getModelManager().getMissingModel();
        model = getUniqueModel(model, renderMode);
        this.renderItem(stack, renderMode, leftHanded, matrices, vertexConsumers, light, overlay, model);
    }

    @Unique
    public BakedModel getUniqueModel(BakedModel model, ModelTransformation.Mode renderMode) {
        if (UNIQUE_MODES.contains(renderMode)) return model;

        BakedModelManager manager = this.models.getModelManager();
        Identifier id = getID(model);
        if (id == null) return model;

        String inHand = id.toString();
        inHand = inHand.split("#")[0] + "_in_hand#inventory";
        try {
            BakedModel worldModel = manager.getModel(new ModelIdentifier(inHand));
            if (worldModel != manager.getMissingModel()) return worldModel;
        } catch(InvalidIdentifierException ignored) {}
        return model;
    }
    @Unique
    public Identifier getID(BakedModel model) {
        Map<Identifier, BakedModel> models = MinecraftClient.getInstance().getBakedModelManager().models;
        for (Map.Entry<Identifier, BakedModel> entry : models.entrySet()) {
            if (entry.getValue().equals(model)) return entry.getKey();
        }
        return null;
    }
}
